spring.application.name=backend

# 1) Nur HTTPS auf Port 8443
server.port=8443

# 2) SSL aktivieren und Keystore einbinden
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=changeit
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=1

# SQLite-Datei im Backend-Ordner
spring.datasource.url=jdbc:sqlite:meals.db
spring.datasource.driver-class-name=org.sqlite.JDBC

# Damit Spring automatisch eine schema.sql lädt
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql

# Zeigt SQL in der Konsole (optional)
spring.jpa.show-sql=true

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# Register-Endpoint drosseln
bucket4j.filters[1].cache-name=registerBuckets
bucket4j.filters[1].url=/api/auth/register
bucket4j.filters[1].strategy=ip
bucket4j.filters[1].status-code=429

bucket4j.filters[1].rate-limits[0].capacity=5
bucket4j.filters[1].rate-limits[0].refill-tokens=5
bucket4j.filters[1].rate-limits[0].refill-period=1
bucket4j.filters[1].rate-limits[0].refill-period-unit=minutes


# Bucket4j Rate Limits für Login
bucket4j.filters[0].cache-name=loginBuckets
bucket4j.filters[0].url=/api/auth/login
bucket4j.filters[0].strategy=ip
bucket4j.filters[0].status-code=429

# Rate-Limit: 5 Versuche pro Minute
bucket4j.filters[0].rate-limits[0].capacity=5
bucket4j.filters[0].rate-limits[0].refill-tokens=5
bucket4j.filters[0].rate-limits[0].refill-period=1
bucket4j.filters[0].rate-limits[0].refill-period-unit=minutes
